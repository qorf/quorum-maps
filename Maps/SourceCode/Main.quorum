use Libraries.System.File
use Libraries.Data.Formats.JavaScriptObjectNotation
use Libraries.Containers.Support.Pair
use Libraries.Containers.Array
class Main
    Array<Feature> features
    Feature feature
    action Main
        LoadData("json/gz_2010_us_040_00_500k.json")
        output "Finished"
    end

    action LoadData(text value)
        File file
        file:SetPath(value)
        JavaScriptObjectNotation note
        note:Read(file)

        i = 0
        repeat while i < note:GetSize()
            JavaScriptObjectNotation n = note:Get(i)

            if n:GetKey() = "features"
                ProcessFeatures(n)
            end
            i = i + 1
        end

        //just for testing, print out all the states
        i = 0
        repeat while i < features:GetSize()
            Feature f = features:Get(i)
            text clazz = f:WriteToQuorumClass()
            File state
            state:SetPath("states/" + f:GetName() + ".quorum")
            state:CreateDirectories()
            if state:Exists()
                state:Delete()
            end

            state:Write(clazz)
            i = i + 1
        end
    end

    action ProcessFeatures(JavaScriptObjectNotation features)
        JavaScriptObjectNotation theStates = features:GetArray()
        i = 0
        repeat while i < theStates:GetSize()
            JavaScriptObjectNotation state = theStates:Get(i)
            ProcessState(state)
            i = i + 1
        end
    end

    action ProcessState(JavaScriptObjectNotation state)
        i = 0
        repeat while i < state:GetSize()
            JavaScriptObjectNotation prop = state:Get(i)
            if prop:GetKey() = "properties"
                ReadProperties(prop)
            elseif prop:GetKey() = "geometry"
                Array<Array<Pair<number>>> geometry = ReadGeometry(prop)
                feature:SetGeometry(geometry)
                features:Add(feature)

                //we are done reading this state. Read a new one.
                Feature feat
                feature = feat
            end
            i = i + 1
        end
    end

    action ReadProperties(JavaScriptObjectNotation properties)
        i = 0
        repeat while i < properties:GetSize()
            JavaScriptObjectNotation prop = properties:Get(i)
            if prop:GetKey() = "NAME"
                text name = prop:GetText()
                feature:SetName(name)
            end
            i = i + 1
        end
    end

    action ReadGeometry(JavaScriptObjectNotation geometry) returns Array<Array<Pair<number>>>
        Array<Array<Pair<number>>> geometryArray = undefined
        i = 0
        boolean multi = false
        repeat while i < geometry:GetSize()
            JavaScriptObjectNotation prop = geometry:Get(i)
            if prop:GetKey() = "type"
                text type = prop:GetText()
                if type = "Polygon"
                    multi = false
                elseif type = "MultiPolygon"
                    multi = true
                else
                    multi = false
                end
                
            elseif prop:GetKey() = "coordinates"
                if multi
                    //read each part of the array separately
                    geometryArray = ReadMultiCoordinates(prop)
                else
                    geometryArray = ReadCoordinates(prop)
                end
            end
            i = i + 1
        end

        return geometryArray
    end

    action ReadMultiCoordinates(JavaScriptObjectNotation coordinates) returns Array<Array<Pair<number>>>
        Array<Array<Pair<number>>> islands
        boolean isX = true
        number x = 0
        number y = 0
        JavaScriptObjectNotation starting = coordinates:GetArray()
        i = 0
        repeat while i < starting:GetSize()
            JavaScriptObjectNotation prop = starting:Get(i)

            j = 0
            repeat while j < prop:GetSize()
                JavaScriptObjectNotation coordPairs = prop:Get(j)
                Array<Pair<number>> island
                k = 0
                repeat while k < coordPairs:GetSize()
                    JavaScriptObjectNotation p = coordPairs:Get(k)

                    Pair<number> pair
                    l = 0
                    repeat while l < p:GetSize()
                        JavaScriptObjectNotation value = p:Get(l)
                        if isX
                            x = value:GetNumber()
                            isX = false
                        else
                            isX = true
                            y = value:GetNumber()
                            pair:Set(x,y)
                        end
                        l = l + 1
                    end

                    island:Add(pair)
                    k = k + 1
                end

                islands:Add(island)
                j = j + 1
            end
            i = i + 1
        end

        return islands
    end

    action ReadCoordinates(JavaScriptObjectNotation coordinates) returns Array<Array<Pair<number>>>
        Array<Array<Pair<number>>> islands
        boolean isX = true
        number x = 0
        number y = 0
        JavaScriptObjectNotation starting = coordinates:GetArray()
        i = 0
        repeat while i < starting:GetSize()
            JavaScriptObjectNotation prop = starting:Get(i)
            Array<Pair<number>> island
            k = 0
            repeat while k < prop:GetSize()
                JavaScriptObjectNotation p = prop:Get(k)

                Pair<number> pair
                l = 0
                repeat while l < p:GetSize()
                    JavaScriptObjectNotation value = p:Get(l)
                    if isX
                        x = value:GetNumber()
                        isX = false
                    else
                        isX = true
                        y = value:GetNumber()
                        pair:Set(x,y)
                    end
                    l = l + 1
                end

                island:Add(pair)
                k = k + 1
            end

            islands:Add(island)
            i = i + 1
        end

        return islands
    end
end